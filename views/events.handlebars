<br>
<div class="calendar-ui-wrapper">
    <div class="row center valign-wrapper">
        <div class="col s2 m2 l2 valign">
            <a class="prev-month-btn btn-floating btn-large waves-effect waves-light teal"><i class="material-icons">keyboard_arrow_left</i></a>
        </div>
        <div class="col s8 m8 l8">
            <h4>
                <span class="header-day-of-the-week"></span>
                <span class="header-month"></span> 
                <span class="header-day-number"></span>
                <span class="header-year"></span>
            </h4>
        </div>
        <div class="col s2 m2 l2">
            <a class="next-month-btn btn-floating btn-large waves-effect waves-light teal"><i class="material-icons">keyboard_arrow_right</i></a>
        </div>
    </div>
    <table class="calendar-table">
        <thead class="calendar-days-of-the-week">
            <tr>
                <th>Sunday</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
            </tr>
        </thead>
        <tbody class="calendar-months">
            <tr class="row_1 week_1 calendar-weeks">
                <td class="col_1 sundays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_2 mondays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_3 tuesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_4 wednesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_5 thursdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_6 fridays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_7 saturdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
            </tr>
            <tr class="row_2 week_2 calendar-weeks">
                <td class="col_1 sundays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_2 mondays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_3 tuesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_4 wednesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_5 thursdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_6 fridays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_7 saturdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
            </tr>
            <tr class="row_3 week_3 calendar-weeks">
                <td class="col_1 sundays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_2 mondays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_3 tuesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_4 wednesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_5 thursdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_6 fridays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_7 saturdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
            </tr>
            <tr class="row_4 week_4 calendar-weeks">
                <td class="col_1 sundays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_2 mondays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_3 tuesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_4 wednesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_5 thursdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_6 fridays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_7 saturdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
            </tr>
            <tr class="row_5 week_5 calendar-weeks">
                <td class="col_1 sundays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_2 mondays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_3 tuesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_4 wednesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_5 thursdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_6 fridays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_7 saturdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
            </tr>
            <tr class="row_6 week_6 calendar-weeks">
                <td class="col_1 sundays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_2 mondays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_3 tuesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_4 wednesdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_5 thursdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_6 fridays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
                <td class="col_7 saturdays calendar-days">
                    <div class="calendar-days-wrapper">
                        <span class="dayNumberOfMonth"></span>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<style type="text/css">
    .current-day {
        background-color: #388e3c; /* green darken-2 */
        color: white;
    }

    .calendar-ui-wrapper {
        width: 100%;
        height: 100%;
    }

    .calendar-table {
        width: 100%;
        height: 100%;
        border-collapse: collapse;
    }

    .calendar-table,
    .calendar-days,
    .calendar-weeks {
        border: 1px solid black;
    }

    .calendar-days-of-the-week th {
        width: 14.28%;
        min-width: 14.28%;
        text-align: center;
    }

    .calendar-days-wrapper {
        width: 100%;
        height: 100%;
    }

    .calendar-days:hover {
        background-color: #26a69a; /* teal lighten-1 */
        color: white;
    }

    .calendar-weeks {
        width: 100%;
        min-height: 200px;
    }

    .next-month,
    .previous-month {
        background-color: lightgrey;
    }

    .next-month:hover,
    .previous-month:hover {
        background-color: grey;
        color: black;
    }

</style>

<script type="text/javascript">
    /* GLOBAL VARAIABLES */
    var g_LocationOfFirstDayOfTodaysMonth = {
        'row': 1,   // will always be 1
        'col': 0
    };
    var g_LocationOfLastDayOfTodaysMonth = {
        'row': 0,
        'col': 0
    }
    var g_DisplayedYear = 0;
    var g_DisplayedMonth = 0;

    $(document).ready(function() {
        var d = new Date();

        // must be manually updated yearly
        var firstDayOfTheYear = {
            'dayOfTheWeek': 'Friday',
            'n_ScrapDays': 2, // because dayOfTheWeek = Friday
            'year': 2016,
            'month': 0, // 0 -> January
            'day': 1
        };

        var today = {
            'n_DaysFromTheFirst': -1,   // use '-1' as a flag
            'dayOfTheWeek': d.getDay() + 1, // +1 bc range is [0,6]
            'year': d.getFullYear(),
            'month': d.getMonth(),
            'day': d.getDate()
        };

        var daysOfTheWeek = [
            'Sunday', 'Monday', 'Tuesday',
            'Wednesday', 'Thursday', 'Friday', 
            'Saturday'
        ];

        var monthsOfTheYear = [
            'January', 'February', 'March',
            'April', 'May', 'June',
            'July', 'August', 'September',
            'October', 'November', 'December'
        ];

        $('.header-day-of-the-week').html(daysOfTheWeek[d.getDay()] + ',');
        $('.header-month').html(monthsOfTheYear[d.getMonth()]);
        $('.header-day-number').html(d.getDate() + ',');
        $('.header-year').html(d.getFullYear());

        var d_FirstDay = new Date(Date.UTC(firstDayOfTheYear.year, firstDayOfTheYear.month, firstDayOfTheYear.day));

        var d_Today = new Date(today.year, today.month, today.day);
        today.n_DaysFromTheFirst = Math.floor(daysBetween(d_FirstDay, d_Today) + 1); // +1 bc it is the nth day - ex below
        // Example:
        //      28 - 1 = 27 days in between.
        //      But we want the day number, which is 28th.

        console.log("d_Today:", d_Today);
        console.log("# of Days since First:", today.n_DaysFromTheFirst-1);
        console.log("Day Number", today.n_DaysFromTheFirst);

        /*
            At This Point, the Known:
                - Total number of days in this Year
                - The day number relative to 01/01/2016
                - Number of scrap days, 2, for 2016
        */

        var x = today.n_DaysFromTheFirst - firstDayOfTheYear.n_ScrapDays; // make the year's week begin on a Sunday
        var n_DaysInAWeek = 7;
        var n_Weeks = Math.floor(x / n_DaysInAWeek);
        var n_DaysIntoTheWeek = x % n_DaysInAWeek;

        console.log("Number of Weeks Completed: " + n_Weeks + " r" + n_DaysIntoTheWeek);

        // check to see if 'n_ScrapDays' !== 7 || 'n_DaysIntoTheWeek' === 0
        if(n_DaysIntoTheWeek !== 0) {
            ++n_Weeks; // 01-01-XXXX is always as a whole week
        }

        console.log("Week Number: " + n_Weeks);

        /*
            At This Point, the Known:
                - The week number relative to the year
                - Verified how far into the week we are
                    > if n_DaysIntoTheWeek !== d.getDate() then ERR
        */

        var n_DaysInEachMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        // check if Leap Year
        if(today.year % 4 === 0) {
            n_DaysInEachMonth[1] = 29;
        }
        console.log("Total days in this Year:", sumArray(n_DaysInEachMonth));

        var firstDayOfCurrMonth = SumDaysWithinMonths(n_DaysInEachMonth, firstDayOfTheYear.month, today.month) + 1; // +1 for 1st of month
        console.log('first day of current month:', firstDayOfCurrMonth);
        var firstDayOfCurrMonth = firstDayOfCurrMonth - firstDayOfTheYear.n_ScrapDays; // accounts for "1st week of the year" which is not always 7 days long - in 2016 it's only 2 days long.
        console.log('first day of current month rel. to first sunday of the year:', firstDayOfCurrMonth);

        /*
            At This Point, the Known:
                - Days between 01/01/20YY and mm/01/20YY
                    > where 'mm' is the current month number
        */

        var dayOfTheWeekCurrMonthInits = firstDayOfCurrMonth % n_DaysInAWeek;
        if(dayOfTheWeekCurrMonthInits === 0) { dayOfTheWeekCurrMonthInits = 7; }
        console.log('dayOfTheWeekCurrMonthInits:', dayOfTheWeekCurrMonthInits);

        /*
            At this Point, the Known:
                - the first week of the current month is always week 1
                - the column number of the first day of the current month
                    > which means I know what day of the week
                    > Example: 12/01/16 has coordinates (1, 5)
                                Which is a Thursday, hence the 5
        */

        var n_ScrapDaysOfCurrentMonth = 8 - dayOfTheWeekCurrMonthInits;
        var firstSundayOfCurrentMonth = n_ScrapDaysOfCurrentMonth + 1;
        console.log('firstSundayOfCurrentMonth:', firstSundayOfCurrentMonth);
        console.log('today.day:', today.day);

        /*
            At this Point, the Known:
                - what day number the first sunday occurs in current month
                - Example: 12/04/16 begins on the first Sunday - by 
                           coincidence.
        */

        // calculate all sundays of current month
        var temp = 0;
        var currWeekNumber_String = '';
        var week_number = 1; // first week number relative to current month
        if(today.day < firstSundayOfCurrentMonth) {
            currWeekNumber_String = 'week_1';
        } else if(today.day < (firstSundayOfCurrentMonth + (7 * week_number))) {
            currWeekNumber_String = 'week_2';
        } else if(today.day < (firstSundayOfCurrentMonth + (7 * ++week_number))) {
            currWeekNumber_String = 'week_3';
        } else if(today.day < (firstSundayOfCurrentMonth + (temp = (7 * ++week_number))) && temp <= n_DaysInEachMonth[today.month]) {
            currWeekNumber_String = 'week_4';
        } else if(today.day < (firstSundayOfCurrentMonth + (temp = (7 * ++week_number))) && temp <= n_DaysInEachMonth[today.month]) {
            currWeekNumber_String = 'week_5';
        } else if(today.day < (firstSundayOfCurrentMonth + (temp = (7 * ++week_number))) && temp <= n_DaysInEachMonth[today.month]) {
            currWeekNumber_String = 'week_6';
        } else {
            alert('Error displaying Calendar - try again later.');
        }


        // find col_# of current day
        var currDayOfTheWeek_String = '';
        var currDayOfTheWeek = today.dayOfTheWeek;
        switch(currDayOfTheWeek) {
            case 1:
                currDayOfTheWeek_String = 'sundays';
                break;
            case 2:
                currDayOfTheWeek_String = 'mondays';
                break;
            case 3:
                currDayOfTheWeek_String = 'tuesdays';
                break;
            case 4:
                currDayOfTheWeek_String = 'wednesdays';
                break;
            case 5:
                currDayOfTheWeek_String = 'thursdays';
                break;
            case 6:
                currDayOfTheWeek_String = 'fridays';
                break;
            case 7:
                currDayOfTheWeek_String = 'saturdays';
                break;
            default:
                currDayOfTheWeek_String = 'notCurrentMonth';
                break;
        }

        console.log('currWeekNumber_String:', currWeekNumber_String);
        console.log('currDayOfTheWeek:', currDayOfTheWeek);

        ///////////////////////////////////////////////////////////////////
        // LET THE JQUERY DOM MANIPULATION BEGIN

        /*
            Special Classes for UI:
                - current-day
                - next-month
                - previous-month
                - dayNumberOfMonth
        */

        var dot_String = '.';
        var todaysCoordinate = dot_String + currWeekNumber_String + ' ' + dot_String + currDayOfTheWeek_String;
        console.log('todaysCoordinate:', todaysCoordinate);
        $(todaysCoordinate).addClass('current-day');
        
        var previousMonth = PreviousMonth(today.year, today.month, n_DaysInEachMonth);
        var nextMonth = NextMonth(today.year, today.month, n_DaysInEachMonth);

        PopulateCalendar(parseInt(currWeekNumber_String.split('_')[1]), currDayOfTheWeek, today.year, n_DaysInEachMonth[today.month], today.day, previousMonth, nextMonth);
        g_DisplayedYear = today.year;
        g_DisplayedMonth = today.month;

        console.log('g_LocationOfFirstDayOfTodaysMonth',g_LocationOfFirstDayOfTodaysMonth);
        console.log('g_LocationOfLastDayOfTodaysMonth',g_LocationOfLastDayOfTodaysMonth);
    });

    ///////////////////////////////////////////////////////////////////////
    /*
        both functions below account for Daylight savings. Found on 
        http://stackoverflow.com/a/11252167/3502494
    */
    function treatAsUTC(date) {
        var result = new Date(date);
        result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
        return result;
    }

    function daysBetween(startDate, endDate) {
        var millisecondsPerDay = 24 * 60 * 60 * 1000;
        return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay;
    }
    ///////////////////////////////////////////////////////////////////////

    // This function is not important - can be DELETED
    function sumArray(arr) {
        let sum = 0;
        for(let i = 0; i < arr.length; ++i) {
            sum += arr[i];
        }
        return sum;
    }

    function GetMonthString(index) {
        var monthsOfTheYear = [
            'January', 'February', 'March',
            'April', 'May', 'June',
            'July', 'August', 'September',
            'October', 'November', 'December'
        ];

        return monthsOfTheYear[index];
    }

    /*
        Doesn't deep copy nested objects
    */
    function DeepCopy(original, clone) {
        for(var property in original) {
            clone[property] = original[property];
        }
    }

    /*
        from (first day of month 'a') to (last day of month 'b')
    */
    function SumDaysWithinMonths(monthsArr, a, b) {
        var sum = 0;
        for(var i = a; i < b; ++i) {
            sum += monthsArr[i];
        }
        return sum;
    }

    /*
        accounts for leap year
        currYear : current Year
        n_DaysInEachMonth : number of days in each month relative to the year
        returns : number of days in previous month
    */
    function PreviousMonth(currYear, currMonth, n_DaysInEachMonth) {
        var prevMonth = (currMonth - 1 < 0) ? 11 : currMonth - 1;
        var isLeapYear = currYear % 4 === 0;

        // check leap years
        if(prevMonth === 1 && isLeapYear) {
            return 29;
        } else if(prevMonth === 1 && !isLeapYear) {
            return 28;
        }

        return n_DaysInEachMonth[prevMonth];
    }

    /*
        This function does not depend on the number of days in the prev month
        @currDateObj : holds this month's information
        @prevDateObj : will be holding previous month's information based
                       on curr month's and is the target
        @n_DaysInEachMonth : shallow-copy of original
    */
    function PreviousMonth_v2(currDateObj, prevDateObj, n_DaysInEachMonth) {
        var prevMonth = currDateObj.Month - 1;
        if(prevMonth < 0) {
            prevDateObj.Year = prevDateObj.Year - 1;
            prevDateObj.Month = 11;
            if(prevDateObj.Year % 4 === 0) {
                n_DaysInEachMonth[1] = 29;
            }
        } else {
            prevDateObj.Month = prevMonth;
        }

        // Get (row, col) of last day of previous month
        //      > row is calculated after the (row, col) of first day is known
        var row2 = 2;
        var col2 = currDateObj.FirstDayOfTheMonth.col - 1;
        if(col2 < 1) {
            col2 = 7;    // reset col
        }

        var n_DaysInPrevMonth = n_DaysInEachMonth[prevDateObj.Month];
console.log('col2:',col2);
console.log('n_DaysInPrevMonth:',n_DaysInPrevMonth);
        var n_DaysLeftInPrevMonth = n_DaysInPrevMonth - col2;
console.log('n_DaysLeftInPrevMonth:',n_DaysLeftInPrevMonth);
        for(var i = 0; n_DaysLeftInPrevMonth >= 7; ++i, ++row2) {
            n_DaysLeftInPrevMonth = n_DaysLeftInPrevMonth - 7;
console.log('n_DaysLeftInPrevMonth:',n_DaysLeftInPrevMonth);
        }

        var row = 1;    // always 1st week of its month
        var col = 7 - n_DaysLeftInPrevMonth + 1;

        prevDateObj.FirstDayOfTheMonth.row = row;
        prevDateObj.FirstDayOfTheMonth.col = col;

        prevDateObj.LastDayOfTheMonth.row = row2;
        prevDateObj.LastDayOfTheMonth.col = col2;

        console.log('prevDateObj:', prevDateObj);
        console.log('currDateObj:', currDateObj);
    }

    /*
        accounts for leap year
        currYear : current Year
        n_DaysInEachMonth : number of days in each month relative to the year
        returns : number of days in next month
    */
    function NextMonth(currYear, currMonth, n_DaysInEachMonth) {
        var nextMonth = (currMonth + 1 > 11) ? 0 : currMonth + 1;
        var isLeapYear = currYear % 4 === 0;

        // check leap years
        if(nextMonth === 1 && isLeapYear) {
            return 29;
        } else if(nextMonth === 1 && !isLeapYear) {
            return 28;
        }

        return n_DaysInEachMonth[nextMonth];
    }

    /* 
        This function does not depend on the number of days in the next month
        @currDateObj : holds this months information
        @nextDateObj : will be holding next months information based on curr month's
        @n_DaysInEachMonth : shallow-copy of original
    */
    function NextMonth_v2(currDateObj, nextDateObj, n_DaysInEachMonth) {
        var nextMonth = currDateObj.Month + 1;
        if(nextMonth > 11) {
            nextDateObj.Year += 1;
            nextDateObj.Month = 0;
            if(nextDateObj.Year % 4 === 0) {
                n_DaysInEachMonth[1] = 29;
            }
        } else {
            nextDateObj.Month = nextMonth;
        }

        var row = 1;
        var col = currDateObj.LastDayOfTheMonth.col + 1;
        if(col > 7) {
            col = 1;    // reset col
        }

        nextDateObj.FirstDayOfTheMonth.row = row;
        nextDateObj.FirstDayOfTheMonth.col = col;

        var n_DaysInNextMonth = n_DaysInEachMonth[nextDateObj.Month];
        var n_DaysLeftInNextMonth = n_DaysInNextMonth;
        var row2 = 1;
        if(col !== 1) {
            n_DaysLeftInNextMonth = n_DaysLeftInNextMonth - (7 - col - 1);
            ++row2;
        }

        for(var i = 0; n_DaysLeftInNextMonth >= 7; ++i, ++row2) {
            n_DaysLeftInNextMonth = n_DaysLeftInNextMonth - 7;
        }

        nextDateObj.LastDayOfTheMonth.col = n_DaysLeftInNextMonth;
        nextDateObj.LastDayOfTheMonth.row = row2;
    }

    /*
        @x_Today : represents the row number
        @y_Today : represents the column number
        @year : is the current year
        @month : is the number of days in current month
        @day : is the current day
        @previousMonth : is the total number of days in the previous month
        @nextMonth : is the total number of days in the next month
    */
    function PopulateCalendar(x_Today, y_Today, year, month, day, previousMonth, nextMonth) {
        // calendar => grid(6, 7) => 6 rows, 7 columns
        var x_Init = 0,
            y_Init = 0;
        var x_End  = 6,
            y_End  = 7;

        console.log('x_Today:', x_Today);
        console.log('y_Today:', y_Today);
        console.log('day:', day);
        console.log('month:', month);
        console.log('previousMonth:', previousMonth);
        console.log('nextMonth:', nextMonth);

        // total days away from calendar-grid(0,0) inclusive
        var totalDaysFromOrigin = 7 * (x_Today - 1) + y_Today;
        console.log('totalDaysFromOrigin:', totalDaysFromOrigin);

        // total days that show from previous month in week 1 of current month
        var totalDaysFromPrevMonth = totalDaysFromOrigin - day;
        console.log('totalDaysFromPrevMonth:', totalDaysFromPrevMonth);

        // start day of current month
        var currMonthInitialCol = totalDaysFromPrevMonth + 1;
        console.log('currMonthInitialCol:',currMonthInitialCol);
        g_LocationOfFirstDayOfTodaysMonth.col = currMonthInitialCol;

        // get (previous month's last day - totalDaysFromPrevMonth) number
        var calendarOriginDay = previousMonth - totalDaysFromPrevMonth;
        console.log('calendarOriginDay:',calendarOriginDay);

        var nextMonthOriginDay = 1;

        // Populate Calendar
        var prevMonthDays = 1;
        var currMonthDays = 1;
        for(var row = 1; row < 7; ++row) {
            for(var col = 1; col < 8; ++col, ++prevMonthDays) {
                var calendarCell = '.row_' + row + ' .col_' + col;
                var dayIterator = calendarCell + ' .dayNumberOfMonth';

                // prev month
                if(prevMonthDays <= totalDaysFromPrevMonth) {
                    $(dayIterator).html(calendarOriginDay + col);
                    $(calendarCell).addClass('previous-month');
                // next month    
                } else if(currMonthDays > month) {
                    $(dayIterator).html(nextMonthOriginDay++);
                    $(calendarCell).addClass('next-month');
                // curr month
                } else {
                    if(currMonthDays === month) {
                        g_LocationOfLastDayOfTodaysMonth.row = row;
                        g_LocationOfLastDayOfTodaysMonth.col = col;
                    }
                    $(dayIterator).html(currMonthDays++);
                }
            }
        }
    }

    /*
        Removes any styling in the calendar display including the days written
        in the month
    */
    function ClearCalendar() {
        for(var row = 1; row < 7; ++row) {
            for(var col = 1; col < 8; ++col) {
                var calendarCell = '.row_' + row + ' .col_' + col;
                var dayIterator = calendarCell + ' .dayNumberOfMonth';
                $(calendarCell).removeClass('next-month');
                $(calendarCell).removeClass('previous-month');
                $(calendarCell).removeClass('current-day');
                $(dayIterator).html('');
            }
        }
    }

    function PopulateNextMonth(previousMonthObj, focusedMonthObj) {
        // if first day of the month of 'focusedMonthObj' is at (1,1) then disregard previousMonthObj
        g_LocationOfFirstDayOfTodaysMonth.row = focusedMonthObj.FirstDayOfTheMonth.row;
        g_LocationOfFirstDayOfTodaysMonth.col = focusedMonthObj.FirstDayOfTheMonth.col;

        // assumed that it's not a leap year
        var n_DaysInEachMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if(focusedMonthObj.Year % 4 === 0) { n_DaysInEachMonth[1] = 29; }
        var n_DaysInFocusedMonth = n_DaysInEachMonth[focusedMonthObj.Month]

        // for previous month dates that are displayed in first week
        var prevMonthInitCol = previousMonthObj.LastDayOfTheMonth.col;
        var n_DaysFromPreviousMonth = n_DaysInEachMonth[previousMonthObj.Month];
        var calendarOriginDay = n_DaysFromPreviousMonth - previousMonthObj.LastDayOfTheMonth.col;
        console.log('prevMonthInitCol:', prevMonthInitCol);
        console.log('focusedMonthObj.FirstDayOfTheMonth.col:',focusedMonthObj.FirstDayOfTheMonth.col);

        // check if month being displayed is the today's current month
        var isCurrentMonth = false;
        var d = new Date();
        if(focusedMonthObj.Year === d.getFullYear() &&
           focusedMonthObj.Month === d.getMonth()) {
            isCurrentMonth = true;
        }
        //////////////////////////////////////////////////////////////

        // Populate Calendar
        var layDownPreviousMonthDays = 1;
        var currMonthDays = 1;
        var nextMonthOriginDay = 1;
        for(var row = 1; row < 7; ++row) {
            for(var col = 1; col < 8; ++col, ++layDownPreviousMonthDays) {
                var calendarCell = '.row_' + row + ' .col_' + col;
                var dayIterator = calendarCell + ' .dayNumberOfMonth';

                if(layDownPreviousMonthDays < focusedMonthObj.FirstDayOfTheMonth.col) {
                    console.log('prevMonthInitCol:',prevMonthInitCol);
                    console.log('focusedMonthObj.FirstDayOfTheMonth.col:',focusedMonthObj.FirstDayOfTheMonth.col);
                    console.log('hi', calendarOriginDay + col);
                    $(dayIterator).html(calendarOriginDay + col);
                    $(calendarCell).addClass('previous-month');
                } else if(currMonthDays > n_DaysInFocusedMonth) {
                    $(dayIterator).html(nextMonthOriginDay++);
                    $(calendarCell).addClass('next-month');
                } else {
                    if(currMonthDays === n_DaysInFocusedMonth) {
                        g_LocationOfLastDayOfTodaysMonth.row = row;
                        g_LocationOfLastDayOfTodaysMonth.col = col;
                    }
                    if(isCurrentMonth && d.getDate() === currMonthDays) {
                        $(calendarCell).addClass('current-day');
                    }
                    $(dayIterator).html(currMonthDays++);
                }
            }
        }

        g_DisplayedYear = focusedMonthObj.Year;
        g_DisplayedMonth = focusedMonthObj.Month;

        $('.header-day-of-the-week').html('');
        $('.header-month').html(GetMonthString(focusedMonthObj.Month));
        $('.header-day-number').html('');
        $('.header-year').html(focusedMonthObj.Year);

        if(isCurrentMonth) {
            var daysOfTheWeek = [
                'Sunday', 'Monday', 'Tuesday',
                'Wednesday', 'Thursday', 'Friday', 
                'Saturday'
            ];
            $('.header-day-of-the-week').html(daysOfTheWeek[d.getDay()] + ',');
            $('.header-day-number').html(d.getDate() + ',');
        }

        console.log('g_LocationOfFirstDayOfTodaysMonth',g_LocationOfFirstDayOfTodaysMonth);
        console.log('g_LocationOfLastDayOfTodaysMonth',g_LocationOfLastDayOfTodaysMonth);
    }

    function PopulatePreviousMonth(focusedMonthObj, nextMonthObj) {
        // if first day of the month of 'focusedMonthObj' is at (1,1) then disregard nextMonthObj
        g_LocationOfFirstDayOfTodaysMonth.row = focusedMonthObj.FirstDayOfTheMonth.row;
        g_LocationOfFirstDayOfTodaysMonth.col = focusedMonthObj.FirstDayOfTheMonth.col;

        // assumed that it's not a leap year
        var n_DaysInEachMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if(focusedMonthObj.Year % 4 === 0) { n_DaysInEachMonth[1] = 29; }
        var n_DaysInFocusedMonth = n_DaysInEachMonth[focusedMonthObj.Month]

        // for previous month dates that are displayed in first week
        var nextMonthInitCol = nextMonthObj.LastDayOfTheMonth.col;
        var prevMonthNumber = focusedMonthObj.Month - 1;
        if(prevMonthNumber < 0) {
            prevMonthNumber = 11;
        }
        var n_DaysInPrevMonth = n_DaysInEachMonth[prevMonthNumber];
        console.log('> n_DaysInPrevMonth:', n_DaysInPrevMonth);
        var calendarOriginDay = n_DaysInPrevMonth - focusedMonthObj.FirstDayOfTheMonth.col + 1;
        // console.log('nextMonthInitCol:', nextMonthInitCol);
        console.log('focusedMonthObj.FirstDayOfTheMonth.col:',focusedMonthObj.FirstDayOfTheMonth.col);

        // check if month being displayed is the today's current month
        var isCurrentMonth = false;
        var d = new Date();
        if(focusedMonthObj.Year === d.getFullYear() &&
           focusedMonthObj.Month === d.getMonth()) {
            isCurrentMonth = true;
        }
        //////////////////////////////////////////////////////////////

        // Populate Calendar HERE
        var layDownPreviousMonthDays = 1;
        var currMonthDays = 1;
        var nextMonthOriginDay = 1;
        for(var row = 1; row < 7; ++row) {
            for(var col = 1; col < 8; ++col, ++layDownPreviousMonthDays) {
                var calendarCell = '.row_' + row + ' .col_' + col;
                var dayIterator = calendarCell + ' .dayNumberOfMonth';

                if(layDownPreviousMonthDays < focusedMonthObj.FirstDayOfTheMonth.col) {
                    $(dayIterator).html(calendarOriginDay + col);
                    $(calendarCell).addClass('previous-month');
                } else if(currMonthDays > n_DaysInFocusedMonth) {
                    $(dayIterator).html(nextMonthOriginDay++);
                    $(calendarCell).addClass('next-month');
                } else {
                    if(currMonthDays === n_DaysInFocusedMonth) {
                        g_LocationOfLastDayOfTodaysMonth.row = row;
                        g_LocationOfLastDayOfTodaysMonth.col = col;
                    }
                    if(isCurrentMonth && d.getDate() === currMonthDays) {
                        $(calendarCell).addClass('current-day');
                    }
                    $(dayIterator).html(currMonthDays++);
                }
            }
        }

        g_DisplayedYear = focusedMonthObj.Year;
        g_DisplayedMonth = focusedMonthObj.Month;

        $('.header-day-of-the-week').html('');
        $('.header-month').html(GetMonthString(focusedMonthObj.Month));
        $('.header-day-number').html('');
        $('.header-year').html(focusedMonthObj.Year);

        if(isCurrentMonth) {
            var daysOfTheWeek = [
                'Sunday', 'Monday', 'Tuesday',
                'Wednesday', 'Thursday', 'Friday', 
                'Saturday'
            ];
            $('.header-day-of-the-week').html(daysOfTheWeek[d.getDay()] + ',');
            $('.header-day-number').html(d.getDate() + ',');
        }

        console.log('g_LocationOfFirstDayOfTodaysMonth',g_LocationOfFirstDayOfTodaysMonth);
        console.log('g_LocationOfLastDayOfTodaysMonth',g_LocationOfLastDayOfTodaysMonth);
    }

    function DisplayNextMonth() {
        var d = new Date();
        var focusedMonthObj = {
            'Year': g_DisplayedYear,
            'Month': g_DisplayedMonth,
            'Day': d.getDate(),
            'FirstDayOfTheMonth': {
                'row': g_LocationOfFirstDayOfTodaysMonth.row,
                'col': g_LocationOfFirstDayOfTodaysMonth.col
            },
            'LastDayOfTheMonth': {
                'row': g_LocationOfLastDayOfTodaysMonth.row,
                'col': g_LocationOfLastDayOfTodaysMonth.col
            }
        }
        
        // Default - assumed Not in a Leap Year
        var n_DaysInEachMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        var prevMonthObj = {
            'Year': g_DisplayedYear,
            'Month': g_DisplayedMonth,
            'Day': d.getDate(),
            'FirstDayOfTheMonth': {
                'row': g_LocationOfFirstDayOfTodaysMonth.row,
                'col': g_LocationOfFirstDayOfTodaysMonth.col
            },
            'LastDayOfTheMonth': {
                'row': g_LocationOfLastDayOfTodaysMonth.row,
                'col': g_LocationOfLastDayOfTodaysMonth.col
            }
        };

        // based on arg1 calculate next month's data into arg2
        NextMonth_v2(focusedMonthObj, focusedMonthObj, n_DaysInEachMonth.slice(0));
        ClearCalendar();    // reset calendar styles
        PopulateNextMonth(prevMonthObj, focusedMonthObj);
    }

    function DisplayPreviousMonth() {
        var d = new Date();
        var focusedMonthObj = {
            'Year': g_DisplayedYear,
            'Month': g_DisplayedMonth,
            'Day': d.getDate(),
            'FirstDayOfTheMonth': {
                'row': g_LocationOfFirstDayOfTodaysMonth.row,
                'col': g_LocationOfFirstDayOfTodaysMonth.col
            },
            'LastDayOfTheMonth': {
                'row': g_LocationOfLastDayOfTodaysMonth.row,
                'col': g_LocationOfLastDayOfTodaysMonth.col
            }
        }

        // Default - assumed Not in a Leap Year
        var n_DaysInEachMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        var nextMonthObj = {
            'Year': g_DisplayedYear,
            'Month': g_DisplayedMonth,
            'Day': d.getDate(),
            'FirstDayOfTheMonth': {
                'row': g_LocationOfFirstDayOfTodaysMonth.row,
                'col': g_LocationOfFirstDayOfTodaysMonth.col
            },
            'LastDayOfTheMonth': {
                'row': g_LocationOfLastDayOfTodaysMonth.row,
                'col': g_LocationOfLastDayOfTodaysMonth.col
            }
        };

        // based on arg1 calculate next month's data into arg2
        PreviousMonth_v2(focusedMonthObj, focusedMonthObj, n_DaysInEachMonth.slice(0));
        ClearCalendar();    // reset calendar styles
        PopulatePreviousMonth(focusedMonthObj, nextMonthObj);
    }

    $('.next-month-btn').click(function() { DisplayNextMonth(); });

    $('.prev-month-btn').click(function() { DisplayPreviousMonth(); });

    $(document).keydown(function(e) {
        switch(e.which) {
            case 37:        // left arrow key
                DisplayPreviousMonth();
                console.log(666);
                break;
            case 39:        // right arrow key
                DisplayNextMonth();
                console.log(999);
                break;
            default:        // no keyboard I'm guessing
                return;     // exit this handler for other keys
                break;
        }
        e.preventDefault(); // prevent the default action (scroll/move caret)
    });
    
</script>